@page "/userList/{id}"
@using System.Net.Http.Headers;
@using Blazored.Modal.Services
@using grupo3.Models;
@inject HttpClient client
@inject IJSRuntime JsRuntime


<div class="container-fluid">
    <div class="row">
        <div class="col-md-7 col-12 mx-auto">
            <table class="table table-striped table-hover">
                <thead class="table-thead">
                    <tr>
                        <th>Nombre</th>
                        <th>Apellidos</th>
                        <th>Email</th>
                        <th>Teléfono</th>
                        <th>Admin</th>
                        <th>Rol</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = primer_elemento; i < ultimo_elemento; i++)
                    {
                        <tr>
                            <td>@users[i].name</td>
                            <td>@users[i].surname</td>
                            <td>@users[i].email</td>
                            <td>@users[i].phone</td>
                            <td>@users[i].admin</td>
                            @{
                                rol = users[i].teacher ? "Profesor" : "Alumno";
                            }
                            <td>@rol</td>
                            <td><img @onclick="@(() => Modal.Show<EditDialog>("Editar Usuario"))" class="table-icon" src="images/pen.png" /></td>
                            <td><img @onclick="@(() => Modal.Show<DeleteDialog>("Eliminar Usuario"))" class="table-icon" src="images/remove.png" /></td>
                        </tr>
                    }
                    
                </tbody>
            </table>
            <br />
            <div class="d-flex justify-content-center">
            <button class="btn btn-primary" @onclick="anterior">Anterior</button>
            <ul class="pagination">
                @for (int i = pagina_actual - 3; i <= pagina_actual + 3; i++) {

                    @if (i == pagina_actual)
                    {
                        markedPage = "markedPage";
                    }
                    else {
                        markedPage = "";
                    }

                    @if (i >= 1 && i <= total_paginas)
                    {
                        var j = i;
                            <li class="paginate-numbers @markedPage" @onclick="@(() => changePage(j))">@i</li>
                    }
                    
                }
            </ul>

            <button class="btn btn-primary" @onclick="siguiente">Siguiente</button>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public object id { get; set; }
    private List<UserResponse>? users { get; set; }
    private string? rol { get; set; }


    int numero_elementos { get; set; } = 5;
    int total_paginas { get; set; }
    int pagina_actual { get; set; } = 1;
    int primer_elemento { get; set; }
    int ultimo_elemento { get; set; }
    string markedPage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        //client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "*");
        //Console.WriteLine(client.DefaultRequestHeaders.ToString());
        //users = await client.GetFromJsonAsync<List<UserResponse>>("http://localhost:8080/api/users");
        //Console.WriteLine(response.name + " //// " + client.DefaultRequestHeaders.ToString());

        UserResponse user1 = new UserResponse(1, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user2 = new UserResponse(2, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", true, false, false);
        UserResponse user3 = new UserResponse(3, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user4 = new UserResponse(4, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user5 = new UserResponse(5, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user6 = new UserResponse(6, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user7 = new UserResponse(7, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user8 = new UserResponse(8, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", true, false, false);
        UserResponse user9 = new UserResponse(9, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user10 = new UserResponse(10, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user11 = new UserResponse(11, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", true, false, false);
        UserResponse user12 = new UserResponse(12, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user13 = new UserResponse(13, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user14 = new UserResponse(14, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user15 = new UserResponse(15, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user16 = new UserResponse(16, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", true, false, false);
        UserResponse user17 = new UserResponse(17, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", false, true, false);
        UserResponse user18 = new UserResponse(18, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", true, false, false);
        UserResponse user19 = new UserResponse(19, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", true, false, false);
        UserResponse user20 = new UserResponse(20, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", true, false, false);
        UserResponse user21 = new UserResponse(21, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", true, false, false);
        UserResponse user22 = new UserResponse(22, "Ander", "Bustillo Pedron", "hola", "ander@gmail.com", "659585402", true, false, false);

        users = new List<UserResponse> { user1, user2, user3, user4, user5, user6, user7, user8, user9, user10, user11, user12, user13, user14, user15,
    user16, user17, user18, user19, user20, user21, user22};

        paginar_lista(users);
    }
    protected void paginar_lista(List<UserResponse> users)
    {
        total_paginas = users.Count / numero_elementos;

        if (users.Count % numero_elementos > 0)
        {
            total_paginas += 1;
        }

        actualizarLista();

    }
    public void siguiente()
    {
        if (pagina_actual < total_paginas)
        {
            pagina_actual += 1;
            actualizarLista();
        }

        Console.WriteLine(pagina_actual);
    }

    public void anterior()
    {
        if (pagina_actual > 1)
        {
            pagina_actual -= 1;
            actualizarLista();
        }
    }

    public void changePage(int clickedPage) {
        Console.WriteLine(clickedPage);
        pagina_actual = clickedPage;
        StateHasChanged();
    }

    public void actualizarLista()
    {

        primer_elemento = numero_elementos * (pagina_actual - 1);
        ultimo_elemento = (pagina_actual == total_paginas && (users.Count % numero_elementos) > 0)
                            ? primer_elemento + (users.Count % numero_elementos)
                            : primer_elemento + numero_elementos;

        StateHasChanged();
    }



}
