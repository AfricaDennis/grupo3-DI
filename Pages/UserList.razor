@page "/userList/{id}"
@using System.Net.Http.Headers;
@using Blazored.Modal.Services
@using grupo3.Models;
@inject HttpClient client
@inject IJSRuntime JsRuntime

@if (users == null)
{
    <p>Something went wrong</p>
}
else
{
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-7 col-12 mx-auto">
                <table class="table table-striped table-hover">
                    <thead class="table-thead">
                        <tr>
                            <th>Nombre</th>
                            <th>Apellidos</th>
                            <th>Email</th>
                            <th>Teléfono</th>
                            <th>Admin</th>
                            <th>Rol</th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = primer_elemento; i < ultimo_elemento; i++)
                        {
                            <tr>
                                <td>@users[i].name</td>
                                <td>@users[i].surname</td>
                                <td>@users[i].email</td>
                                <td>@users[i].phone</td>
                                <td>@users[i].admin</td>
                                @{
                                    int index = i;
                                    rol = users[i].teacher ? "Profesor" : "Alumno";
                                }
                                <td>@rol</td>
                                <td><img @onclick="@(() => showEditModal(users[index]))" class="table-icon" src="images/pen.png" /></td>
                                <td><img @onclick="() => showDeleteModal(users[index])" class="table-icon" src="images/remove.png" /></td>
                            </tr>
                        }

                    </tbody>
                </table>
                <br />
                <div class="d-flex justify-content-center">
                    <button class="btn btn-primary" @onclick="anterior">Anterior</button>
                    <ul class="pagination">
                        @for (int i = pagina_actual - 3; i <= pagina_actual + 3; i++)
                        {

                            @if (i == pagina_actual)
                            {
                                markedPage = "markedPage";
                            }
                            else
                            {
                                markedPage = "";
                            }

                            @if (i >= 1 && i <= total_paginas)
                            {
                                var j = i;
                                <li class="paginate-numbers @markedPage" @onclick="@(() => changePage(j))">@i</li>
                            }

                        }
                    </ul>

                    <button class="btn btn-primary" @onclick="siguiente">Siguiente</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter] public object id { get; set; }
    private List<UserResponse> users { get; set; }
    private string? rol { get; set; }
    protected ModalParameters modalParameters { get; set; }

    int numero_elementos { get; set; } = 10;
    int total_paginas { get; set; }
    int pagina_actual { get; set; } = 1;
    int primer_elemento { get; set; }
    int ultimo_elemento { get; set; }
    string markedPage { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {

        users = await client.GetFromJsonAsync<List<UserResponse>>("http://localhost:8080/api/users");
        paginar_lista(users);
    }
    protected void paginar_lista(List<UserResponse> users)
    {
        total_paginas = users.Count / numero_elementos;

        if (users.Count % numero_elementos > 0)
        {
            total_paginas += 1;
        }

        actualizarLista();

    }
    public void siguiente()
    {
        if (pagina_actual < total_paginas)
        {
            pagina_actual += 1;
            actualizarLista();
        }

        Console.WriteLine(pagina_actual);
    }

    public void anterior()
    {
        if (pagina_actual > 1)
        {
            pagina_actual -= 1;
            actualizarLista();
        }
    }

    public void changePage(int clickedPage)
    {
        Console.WriteLine(clickedPage);
        pagina_actual = clickedPage;
        StateHasChanged();
        actualizarLista();
    }

    public void actualizarLista()
    {

        primer_elemento = numero_elementos * (pagina_actual - 1);
        ultimo_elemento = (pagina_actual == total_paginas && (users.Count % numero_elementos) > 0)
                            ? primer_elemento + (users.Count % numero_elementos)
                            : primer_elemento + numero_elementos;

        StateHasChanged();
    }

    public void showDeleteModal(UserResponse clickedUser)
    {
        modalParameters = new ModalParameters().Add("user", clickedUser);
        Modal.Show<DeleteDialog>("Eliminar Usuario", modalParameters);
    }
    public void showEditModal(UserResponse clickedUser)
    {
        modalParameters = new ModalParameters().Add("user", clickedUser);
        Modal.Show<EditDialog>("Editar Usuario", modalParameters);
    }
}
