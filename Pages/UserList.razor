@page "/userList"
@using System.Net.Http.Headers;
@using grupo3.Models;
@inject HttpClient client


@*<div class="container-fluid">
    <div class="row">
        <div class="col-md-7 col-12 mx-auto">
            <table class="table table-striped table-hover">
                <thead class="table-thead">
                    <tr>
                        <th>Nombre</th>
                        <th>Apellidos</th>
                        <th>Email</th>
                        <th>Teléfono</th>
                        <th>Admin</th>
                        <th>Rol</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < NumberOfRows; i++)
                    {
                        @foreach (UserResponse user in users.Skip(i*5).Take(5))
                        {
                            <tr>
                                <td>@user.name</td>
                                <td>@user.surname</td>
                                <td>@user.email</td>
                                <td>@user.phone</td>
                                <td>@user.admin</td>
                                @{
                                    rol = user.teacher ? "Profesor" : "Alumno";
                                }
                                <td>@rol</td>
                                <td><img class="table-icon" src="images/pen.png" /></td>
                                <td><img class="table-icon" src="images/remove.png" /></td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>*@
@for (int x = 0, y = 0; x < usuarios.Length; x++)
{
    int num = 0;
    @foreach (Usuarios usuario in usuarios.Skip(x * 5).Take(5))
    {
        num++;
    }
    @if (num > 0)
    {
        y++;
    }

    calcularpaginas(y);
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-7 col-12 mx-auto">
            <table class="table table-striped table-hover">
                <thead class="table-thead">
                    <tr>
                        <th>Nombre</th>
                        <th>Apellidos</th>
                        <th>Email</th>
                        <th>Teléfono</th>
                        <th>Admin</th>
                        <th>Rol</th>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i <= numeropag; i++)
                    {
                        @foreach (Usuarios usuario in usuarios.Skip(i * 5).Take(5))
                        {
                            <tr>
                                <td>@usuarios[pagina].name</td>
                                <td>@usuarios[pagina].surname</td>
                                <td>@usuarios[pagina].email</td>
                                <td>@usuarios[pagina].phone</td>
                                <td>@usuarios[pagina].admin</td>
                                @{
                                    rol = usuarios[pagina].teacher ? "Profesor" : "Alumno";
                                }
                                <td>@rol</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@for (int x = 1; x <= numeropag; x++)
{
    <a @onclick="@(() => cambioDePagina(x))">@x</a>
}

    

@*<Confirm @ref="DeleteConfirmation"
    />*@

@code {
    private Usuarios[]? usuarios;
    int pagina = 0;
    int numeropag = 0;
    private List<UserResponse> users { get; set; }
    private string rol { get; set; }
    [Parameter]
    public int NumberOfRows { get; set; } = 5
    ;
    protected override async Task OnInitializedAsync()
    {
        usuarios = await client.GetFromJsonAsync<Usuarios[]>("sample-data/usuarios.json");
    }

    public class Usuarios
    {
        public string? name { get; set; }
        public string? surname { get; set; }
        public string? email { get; set; }
        public string? phone { get; set; }
        public bool teacher { get; set; }
        public bool admin { get; set; }
    }


    protected ConfirmBase DeleteConfirmation { get; set; }

    protected void Delete_Click()
    {
        DeleteConfirmation.Show();
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            Console.WriteLine("Borrado con exito");
        }
    }

    public void calcularpaginas(int hojas)
    {
        numeropag = hojas;
    }

    public void cambioDePagina(int cambio)
    {
        pagina = cambio;
    }

}
