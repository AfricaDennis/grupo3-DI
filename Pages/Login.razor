@page "/login"
@using Models
@using System.Text.Json
@layout EmptyLayout
@inject HttpClient client
@inject NavigationManager UriHelper
@inject IJSRuntime JsRuntime

<div class="container-fluid">
    <div class="row">
        <div class="col-md-7 col-12 mx-auto">
            <div class="row my-5">
                <div class="col-md-6 col-12 mx-auto">
                    <div class="card">
                        <h2 class="card-header" style="border-radius: 12px 12px 0 0"><b>LOGIN</b></h2>
                        <br />
                        <div class="card-body">
                            <EditForm Model="login" OnValidSubmit="validSubmitRequest">
                                <DataAnnotationsValidator />
                                <div class="form-group input-group-lg">
                                    <i class="fa fa-user" aria-hidden="true"></i>
                                    <label><b>Email: </b></label>
                                    <InputText @bind-Value="login.email" type="email" class="form-control" />
                                    <ValidationMessage For="@(() => login.email)" />
                                </div>
                                <br />
                                <div class="from-group input-group-lg">
                                    <i class="fa fa-lock" aria-hidden="true"></i>
                                    <label><b>Password: </b></label>
                                    <InputText @bind-Value="login.password" type="password" class="form-control" />
                                    <ValidationMessage For="@(() => login.password)" />
                                </div>
                                <br />
                                <br />
                                <div class="from-group input-group-lg d-flex justify-content-center">
                                    <button class="btn btn-primary btn-block px-4 py-2">
                                        <b>
                                            <i style="margin:0px 10px 0px 0px;" class="fa fa-sign-in" aria-hidden="true"></i>
                                            Login
                                        </b>
                                    </button>

                                </div>
                                <br />
                                @if (mostrar)
                                {
                                    <p style="color: red; text-align: center; font-weight: bold">@Mensaje</p>
                                }
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    Models.Login login = new Models.Login();
    public string Mensaje = "El usuario no tiene permisos para acceder.";
    private bool mostrar = false;
    async void validSubmitRequest()
    {
        var response = await client.PostAsJsonAsync("http://localhost:8080/api/auth/login", login);
        if (response.IsSuccessStatusCode)
        {
            UserResponse user = JsonSerializer.Deserialize<UserResponse>(response.Content.ReadAsStringAsync().Result);

            if(user.id != null && user.admin == true){
                UriHelper.NavigateTo($"/userList/{user.id}");
            }
            else{
                mostrar = true;
                StateHasChanged();
            }
        }
        else
        {
            Console.WriteLine("Fashé pibe");
            //Si sale mal
            if (((int)response.StatusCode) == 401)
            {
                await JsRuntime.InvokeVoidAsync("alert", "401 Unauthorized: la petición no ha sido ejecutada porque carece de credenciales válidas de autenticación para el recurso solicitado.");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Algo ha salido mal.");
            }

        }
    }

}


